import fs from 'fs'
import { getGridCandidates, seedGrid, stringifyGrid } from '../helpers/helpers'
import * as matchingSetsSolver from './matchingSetsSolver'

const fileInput = fs.readFileSync('./input.txt', 'utf8')
const grid = seedGrid(fileInput)
const candidatesGrid = getGridCandidates(grid)

describe('Matching sets solver functions', () => {
  describe('findMatches', () => {
    const { findMatches } = matchingSetsSolver

    test('should find all sets of matches for an array of candidates', () => {
      expect(findMatches(candidatesGrid[0])).toMatchSnapshot()
    })
  })

  describe('whittleCandidates', () => {
    const { whittleCandidates, findMatches } = matchingSetsSolver

    test('should process the matching sets, finding matches where the count of the matching sets equals the count of numbers in the set, eliminating those values from all other sets', () => {
      // just printing original for comparison
      expect(stringifyGrid(candidatesGrid, true)).toMatchInlineSnapshot(`
        "-------------------------------------------------------
        |  9  |  1  |  6  |  4  |  2,5  |  2,8  |  2,5  |  3  |  7  |
        -------------------------------------------------------------
        |  2  |  3,5  |  4  |  5,7,8  |  1,5,7  |  1,7,8,9  |  6  |  4,5,8  |  4,5,8,9  |
        ---------------------------------------------------------------------------------
        |  5  |  8  |  7  |  2,5  |  3  |  6  |  1  |  4,5  |  2,4,5,9  |
        -----------------------------------------------------------------
        |  3,6,7,8  |  9  |  5  |  2,3,6,7  |  1,2,4,6,7  |  1,2,4,7  |  2,7  |  7,8  |  1,2,8  |
        -----------------------------------------------------------------------------------------
        |  7  |  4  |  1  |  9  |  8  |  5  |  3  |  6  |  2  |
        -------------------------------------------------------
        |  3,6,7,8  |  2,3,6  |  2,6,8  |  2,3,6,7  |  1,2,6,7  |  1,2,7  |  4  |  9  |  1,2,5,8  |
        -------------------------------------------------------------------------------------------
        |  5,6  |  5,6  |  3  |  1  |  9  |  4,7  |  8  |  2  |  4,5  |
        ---------------------------------------------------------------
        |  1,5,6,8  |  2,5,6  |  9  |  2,5,6,7,8  |  2,4,5,6,7  |  2,4,7,8  |  5,7  |  4,5,7  |  3  |
        ---------------------------------------------------------------------------------------------
        |  4  |  7  |  2,8  |  2,5,8  |  2,5  |  3  |  5,9  |  1  |  6  |
        -----------------------------------------------------------------"
      `)

      const updatedCandidates = whittleCandidates(candidatesGrid.map(findMatches), candidatesGrid)

      expect(updatedCandidates[0][5]).toEqual(['8'])
      expect(updatedCandidates[6][8]).toEqual(['4'])
      expect(stringifyGrid(updatedCandidates, true)).toMatchInlineSnapshot(`
        "-------------------------------------------------------
        |  9  |  1  |  6  |  4  |  2,5  |  8  |  2,5  |  3  |  7  |
        -----------------------------------------------------------
        |  2  |  3,5  |  4  |  5,7,8  |  1,5,7  |  1,7,8,9  |  6  |  4,5,8  |  4,5,8,9  |
        ---------------------------------------------------------------------------------
        |  5  |  8  |  7  |  2,5  |  3  |  6  |  1  |  4,5  |  2,4,5,9  |
        -----------------------------------------------------------------
        |  3,6,7,8  |  9  |  5  |  2,3,6,7  |  1,2,4,6,7  |  1,2,4,7  |  2,7  |  7,8  |  1,2,8  |
        -----------------------------------------------------------------------------------------
        |  7  |  4  |  1  |  9  |  8  |  5  |  3  |  6  |  2  |
        -------------------------------------------------------
        |  3,6,7,8  |  2,3,6  |  2,6,8  |  2,3,6,7  |  1,2,6,7  |  1,2,7  |  4  |  9  |  1,2,5,8  |
        -------------------------------------------------------------------------------------------
        |  5,6  |  5,6  |  3  |  1  |  9  |  4,7  |  8  |  2  |  4  |
        -------------------------------------------------------------
        |  1,5,6,8  |  2,5,6  |  9  |  2,5,6,7,8  |  2,4,5,6,7  |  2,4,7,8  |  5,7  |  4,5,7  |  3  |
        ---------------------------------------------------------------------------------------------
        |  4  |  7  |  2,8  |  2,5,8  |  2,5  |  3  |  5,9  |  1  |  6  |
        -----------------------------------------------------------------"
      `)
    })
  })

  describe('processRowMatchingSets', () => {
    const { processRowMatchingSets } = matchingSetsSolver

    test('should process all row matching sets', () => {
      const updatedCandidates = processRowMatchingSets(candidatesGrid)

      expect(updatedCandidates[6][8]).toEqual(['4'])
      expect(stringifyGrid(updatedCandidates, true)).toMatchInlineSnapshot(`
        "-------------------------------------------------------
        |  9  |  1  |  6  |  4  |  2,5  |  8  |  2,5  |  3  |  7  |
        -----------------------------------------------------------
        |  2  |  3,5  |  4  |  5,7,8  |  1,5,7  |  1,7,8,9  |  6  |  4,5,8  |  4,5,8,9  |
        ---------------------------------------------------------------------------------
        |  5  |  8  |  7  |  2,5  |  3  |  6  |  1  |  4,5  |  2,4,5,9  |
        -----------------------------------------------------------------
        |  3,6,7,8  |  9  |  5  |  2,3,6,7  |  1,2,4,6,7  |  1,2,4,7  |  2,7  |  7,8  |  1,2,8  |
        -----------------------------------------------------------------------------------------
        |  7  |  4  |  1  |  9  |  8  |  5  |  3  |  6  |  2  |
        -------------------------------------------------------
        |  3,6,7,8  |  2,3,6  |  2,6,8  |  2,3,6,7  |  1,2,6,7  |  1,2,7  |  4  |  9  |  1,2,5,8  |
        -------------------------------------------------------------------------------------------
        |  5,6  |  5,6  |  3  |  1  |  9  |  4,7  |  8  |  2  |  4  |
        -------------------------------------------------------------
        |  1,5,6,8  |  2,5,6  |  9  |  2,5,6,7,8  |  2,4,5,6,7  |  2,4,7,8  |  5,7  |  4,5,7  |  3  |
        ---------------------------------------------------------------------------------------------
        |  4  |  7  |  2,8  |  2,5,8  |  2,5  |  3  |  5,9  |  1  |  6  |
        -----------------------------------------------------------------"
      `)
    })
  })

  describe('processColumnMatchingSets', () => {
    const { processColumnMatchingSets } = matchingSetsSolver

    test('should process all column matching sets', () => {
      const updatedCandidates = processColumnMatchingSets(candidatesGrid)

      expect(updatedCandidates[1][4]).toEqual('17'.split(''))
      expect(updatedCandidates[3][4]).toEqual('1467'.split(''))
      expect(updatedCandidates[5][4]).toEqual('167'.split(''))
      expect(updatedCandidates[7][4]).toEqual('467'.split(''))
      expect(stringifyGrid(updatedCandidates, true)).toMatchInlineSnapshot(`
        "-------------------------------------------------------
        |  9  |  1  |  6  |  4  |  2,5  |  2,8  |  2,5  |  3  |  7  |
        -------------------------------------------------------------
        |  2  |  3,5  |  4  |  5,7,8  |  1,7  |  1,7,8,9  |  6  |  4,5,8  |  4,5,8,9  |
        -------------------------------------------------------------------------------
        |  5  |  8  |  7  |  2,5  |  3  |  6  |  1  |  4,5  |  2,4,5,9  |
        -----------------------------------------------------------------
        |  3,6,7,8  |  9  |  5  |  2,3,6,7  |  1,4,6,7  |  1,2,4,7  |  2,7  |  7,8  |  1,2,8  |
        ---------------------------------------------------------------------------------------
        |  7  |  4  |  1  |  9  |  8  |  5  |  3  |  6  |  2  |
        -------------------------------------------------------
        |  3,6,7,8  |  2,3,6  |  2,6,8  |  2,3,6,7  |  1,6,7  |  1,2,7  |  4  |  9  |  1,2,5,8  |
        -----------------------------------------------------------------------------------------
        |  5,6  |  5,6  |  3  |  1  |  9  |  4,7  |  8  |  2  |  4,5  |
        ---------------------------------------------------------------
        |  1,5,6,8  |  2,5,6  |  9  |  2,5,6,7,8  |  4,6,7  |  2,4,7,8  |  5,7  |  4,5,7  |  3  |
        -----------------------------------------------------------------------------------------
        |  4  |  7  |  2,8  |  2,5,8  |  2,5  |  3  |  5,9  |  1  |  6  |
        -----------------------------------------------------------------"
      `)
    })
  })

  describe('processBoxMatchingSets', () => {
    const { processBoxMatchingSets } = matchingSetsSolver

    test('should process all box matching sets', () => {
      const updatedCandidates = processBoxMatchingSets(candidatesGrid)

      expect(updatedCandidates[0][5]).toEqual(['8'])
      expect(updatedCandidates[1][3]).toEqual('78'.split(''))
      expect(updatedCandidates[1][4]).toEqual('17'.split(''))
      expect(updatedCandidates[7][0]).toEqual('18'.split(''))
      expect(updatedCandidates[7][1]).toEqual(['2'])
      expect(stringifyGrid(updatedCandidates, true)).toMatchInlineSnapshot(`
        "-------------------------------------------------------
        |  9  |  1  |  6  |  4  |  2,5  |  8  |  2,5  |  3  |  7  |
        -----------------------------------------------------------
        |  2  |  3,5  |  4  |  7,8  |  1,7  |  1,7,8,9  |  6  |  4,5,8  |  4,5,8,9  |
        -----------------------------------------------------------------------------
        |  5  |  8  |  7  |  2,5  |  3  |  6  |  1  |  4,5  |  2,4,5,9  |
        -----------------------------------------------------------------
        |  3,6,7,8  |  9  |  5  |  2,3,6,7  |  1,2,4,6,7  |  1,2,4,7  |  2,7  |  7,8  |  1,2,8  |
        -----------------------------------------------------------------------------------------
        |  7  |  4  |  1  |  9  |  8  |  5  |  3  |  6  |  2  |
        -------------------------------------------------------
        |  3,6,7,8  |  2,3,6  |  2,6,8  |  2,3,6,7  |  1,2,6,7  |  1,2,7  |  4  |  9  |  1,2,5,8  |
        -------------------------------------------------------------------------------------------
        |  5,6  |  5,6  |  3  |  1  |  9  |  4,7  |  8  |  2  |  4,5  |
        ---------------------------------------------------------------
        |  1,8  |  2  |  9  |  2,5,6,7,8  |  2,4,5,6,7  |  2,4,7,8  |  5,7  |  4,5,7  |  3  |
        -------------------------------------------------------------------------------------
        |  4  |  7  |  2,8  |  2,5,8  |  2,5  |  3  |  5,9  |  1  |  6  |
        -----------------------------------------------------------------"
      `)
    })
  })

  describe('processMatchingSets', () => {
    const { processMatchingSets } = matchingSetsSolver
    test('should process all row, column and box matching sets', () => {
      const updatedCandidates = processMatchingSets(candidatesGrid)

      expect(stringifyGrid(updatedCandidates, true)).toMatchInlineSnapshot(`
        "-------------------------------------------------------
        |  9  |  1  |  6  |  4  |  2,5  |  8  |  2,5  |  3  |  7  |
        -----------------------------------------------------------
        |  2  |  3,5  |  4  |  7,8  |  1,7  |  1,7,8,9  |  6  |  4,5,8  |  4,5,8,9  |
        -----------------------------------------------------------------------------
        |  5  |  8  |  7  |  2,5  |  3  |  6  |  1  |  4,5  |  2,4,5,9  |
        -----------------------------------------------------------------
        |  3,6,7,8  |  9  |  5  |  2,3,6,7  |  1,4,6,7  |  1,2,4,7  |  2,7  |  7,8  |  1,2,8  |
        ---------------------------------------------------------------------------------------
        |  7  |  4  |  1  |  9  |  8  |  5  |  3  |  6  |  2  |
        -------------------------------------------------------
        |  3,6,7,8  |  2,3,6  |  2,6,8  |  2,3,6,7  |  1,6,7  |  1,2,7  |  4  |  9  |  1,2,5,8  |
        -----------------------------------------------------------------------------------------
        |  5,6  |  5,6  |  3  |  1  |  9  |  4,7  |  8  |  2  |  4  |
        -------------------------------------------------------------
        |  1,8  |  2  |  9  |  2,5,6,7,8  |  4,6,7  |  2,4,7,8  |  5,7  |  4,5,7  |  3  |
        ---------------------------------------------------------------------------------
        |  4  |  7  |  2,8  |  2,5,8  |  2,5  |  3  |  5,9  |  1  |  6  |
        -----------------------------------------------------------------"
      `)
    })
  })
})
